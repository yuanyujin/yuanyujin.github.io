{"title":"http and https","date":"2019-05-31T13:10:00.000Z","slug":"httpandhttps","tags":["http","https"],"categories":["java"],"updated":"2019-05-31T15:01:17.200Z","content":"<h1 id=\"网络层结构\">网络层结构<a href=\"post/httpandhttps#网络层结构\"></a></h1><ul>\n<li>OSI是指Open System Interconnect，意为开放式系统互联。</li>\n<li>TCP/IP是指传输控制协议/网间协议，是目前世界上应用最广的协议</li>\n</ul>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>对应tcp/ip层</th>\n<th style=\"text-align:center\">osi各层功能</th>\n<th style=\"text-align:right\">网络协议</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td style=\"text-align:center\">应用程序（电子邮件、文件服务）、用户接口</td>\n<td style=\"text-align:right\">HTTP、FTP、TFTP、NFS</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td style=\"text-align:center\">数据的表示、压缩和加密（数据格式化、代码转换、数据加密）</td>\n<td style=\"text-align:right\">TELNET、SNMP</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td style=\"text-align:center\">建立、管理和终止会话</td>\n<td style=\"text-align:right\">SMTP、DNS</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td style=\"text-align:center\">提供端到端可靠报文传递和错误恢复</td>\n<td style=\"text-align:right\">TCP、UDP</td>\n</tr>\n<tr>\n<td>国际互联层</td>\n<td style=\"text-align:center\">提供数据包从源到宿的传递和网际交互</td>\n<td style=\"text-align:right\">IP、ICMP、ARP、RARP、UUCP</td>\n</tr>\n<tr>\n<td>网络接口层</td>\n<td style=\"text-align:center\">将比特组装成桢和点到点传递</td>\n<td style=\"text-align:right\">FDDI、SLIP、PPP、PDN</td>\n</tr>\n<tr>\n<td>网络接口层</td>\n<td style=\"text-align:center\">传输比特流，以二进制数据形式在物理媒体上传输数据</td>\n<td style=\"text-align:right\">ISO2110、IEEE802、IEEE802.2</td>\n</tr>\n</tbody>\n</table></div></div>\n<h2 id=\"两种模型的区别\">两种模型的区别<a href=\"post/httpandhttps#两种模型的区别\"></a></h2><ul>\n<li>OSI采用七层模型，TCP/IP采用四层模型。</li>\n<li>TCP/IP网络接口层没有真正的定义，只是概念性的描述。OSI把它分为2层，每一层功能详尽。</li>\n<li>在协议开发之前，就有了OSI模型，所以OSI模型具有共通性，而TCP/IP是基于协议建立的模型，不适用于非TCP/IP的网络。</li>\n<li>实际应用中，OSI模型是理论上的模型，没有成熟的产品；而TCP/IP已经成为国际标准。</li>\n</ul>\n<h1 id=\"HTTP协议\">HTTP协议<a href=\"post/httpandhttps#HTTP协议\"></a></h1><p>Http是基于TCP/IP协议的应用程序协议，不包括数据包的传输，主要规定了客户端和服务器的通信格式，默认使用80端口。</p>\n<h2 id=\"发展历史\">发展历史<a href=\"post/httpandhttps#发展历史\"></a></h2><ul>\n<li>1991年发布Http/0.9版本，只有Get命令，且服务端直返HTML格式字符串，服务器响应完毕就关闭TCP连接。</li>\n<li>1996年发布Http/1.0版本，优点：可以发送任何格式内容，包括文字、图像、视频、二进制。也丰富了命令Get，Post，Head。请求和响应的格式加入头信息。缺点：每个TCP连接只能发送一个请求，而新建TCP连接的成本很高，导致Http/1.0新能很差。</li>\n<li>1997发布Http/1.1版本，完善了Http协议，直至20年后的今天仍是最流行的版本。优点如下<ul>\n<li>引入持久连接，TCP默认不关闭，可被多个请求复用，对于一个域名，多数浏览器允许同时建立6个持久连接。</li>\n<li>引入管道机制，即在同一个TCP连接中，可以同时发送多个请求，不过服务器还是按顺序响应。</li>\n<li>在头部加入Content-Length字段，一个TCP可以同时传送多个响应，所以就需要该字段来区分哪些内容属于哪个响应。</li>\n<li>分块传输编码，对于耗时的动态操作，用流模式取代缓存模式，即产生一块数据，就发送一块数据。</li>\n<li>增加了许多命令，头信息增加Host来指定服务器域名，可以访问一台服务器上的不同网站。</li>\n</ul>\n</li>\n<li>2015年发布Http/2版本，它有几个特性：二进制协议、多工、数据流、头信息压缩、服务器推送。</li>\n</ul>\n<h2 id=\"http请求和响应格式\">http请求和响应格式<a href=\"post/httpandhttps#http请求和响应格式\"></a></h2><p>request格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /barite/account/stock/groups HTTP/1.1</span><br><span class=\"line\">QUARTZ-SESSION: MC4xMDQ0NjA3NTI0Mzc0MjAyNg.VPXuA8rxTghcZlRCfiAwZlAIdCA</span><br><span class=\"line\">DEVICE-TYPE: ANDROID</span><br><span class=\"line\">API-VERSION: 15</span><br><span class=\"line\">Host: shitouji.bluestonehk.com</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\">Accept-Encoding: gzip</span><br><span class=\"line\">User-Agent: okhttp/3.10.0</span><br></pre></td></tr></table></figure></p>\n<p>response格式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/1.6.3</span><br><span class=\"line\">Date: Mon, 15 Oct 2018 03:30:28 GMT</span><br><span class=\"line\">Content-Type: application/json;charset=UTF-8</span><br><span class=\"line\">Pragma: no-cache</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Expires: Thu, 01 Jan 1970 00:00:00 GMT</span><br><span class=\"line\">Content-Encoding: gzip</span><br><span class=\"line\">Transfer-Encoding: chunked</span><br><span class=\"line\">Proxy-Connection: Keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;errno&quot;:0,&quot;dialogInfo&quot;:null,&quot;body&quot;:&#123;&quot;list&quot;:[&#123;&quot;flag&quot;:2,&quot;group_id&quot;:1557,&quot;group_name&quot;:&quot;港股&quot;,&quot;count&quot;:1&#125;,&#123;&quot;flag&quot;:3,&quot;group_id&quot;:1558,&quot;group_name&quot;:&quot;美股&quot;,&quot;count&quot;:7&#125;,&#123;&quot;flag&quot;:1,&quot;group_id&quot;:1556,&quot;group_name&quot;:&quot;全部&quot;,&quot;count&quot;:8&#125;]&#125;,&quot;message&quot;:&quot;success&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Host:指定服务器域名，可用来区分访问一个服务器上的不同服务</li>\n<li>Connection：keep-alive（默认值）表示要求服务器不要关闭TCP。close表示明确要求关闭连接</li>\n<li>Accept-Encoding：用户代理，是服务器能识别客户端的操作系统（Android，IOS，WEB）及相关的信息。作用是帮助服务器区分客户端，并且针对不同客户端让用户看到不同数据，做不同的操作。</li>\n<li>Content-Type：服务器告诉客户端数据的格式，常见的值有text/plain、image/jpeg、image/png、video/mp4、application/json、application/zip，这些数据类型总称为MIMETYPE。</li>\n<li>Content-Encodiing：chunked表示采用分块传输编码、有该字段则无需使用Content-Length字段。</li>\n<li>Content-Length：声明数据的长度。请求和回应头部都可以使用该字段。</li>\n</ul>\n<h1 id=\"TCP三次握手\">TCP三次握手<a href=\"post/httpandhttps#TCP三次握手\"></a></h1><p>http和https协议请求时都会通过tcp三次握手建立tcp连接。</p>\n<ul>\n<li>第一次握手，A向B发送信息后，B收到消息，B可以确认A的发信能力和B的收信能力。</li>\n<li>第二次握手，B向A发消息，A收到消息，A可确认A的发信能力和收信能力，A也可确认B的收信能力和发信能力。</li>\n<li>第三次握手，A向B发送信息，B接收信息。B可确认A的收信能力和B的发信能力</li>\n</ul>\n<div class=\"article-img\"><p><img src=\"https://wx2.sinaimg.cn/mw690/007hzwxWly1g3kvuneyw9j30hs0jun51.jpg\" alt=\"TCP三次握手\" title=\"TCP三次握手\" data-zoomable></p></div>\n<p>ACK：响应标识，1表示响应，连接建立成功后，所有的报文段ACK的值都为1</p>\n<p>SYN：连接标识，1表示建立连接，连接请求和连接接受报文段SYN=1，其他情况都是0</p>\n<p>FIN：关闭连接标识，1标识关闭连接，关闭请求和关闭接受报文段FIN=1，其他情况都是0，跟SYN类似。</p>\n<p>seq number：序号，一个随机数X，请求报文段中会有该字段，响应报文段没有</p>\n<p>ack number：应答号，值为请求seq+1，即X+1，除了连接请求和连接接受响应报文段没有该字段，其他的报文段都有该字段。</p>\n<h2 id=\"三次握手具体流程\">三次握手具体流程<a href=\"post/httpandhttps#三次握手具体流程\"></a></h2><ul>\n<li>第一次握手：建立连接请求。客户端发送连接请求报文段，将SYN置为1，seq为随机数x。然后，客户端进入SYN_SEND状态，等待服务器确认。</li>\n<li>第二次握手：确认连接请求。服务器收到客户端的SYN报文段，需要对该请求进行确认，设置ack=x+1（即客户端seq+1）。同时自己也要发送SYN请求信息，即SYN置为1，seq=y。服务器将SYN和ACK信息放在一个报文段中，一并发送给客户端，服务器进入SYN_RECV状态。</li>\n<li>第三次握手：客户端收到SYN+ACK报文段，将ack设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕，客户端和服务券进入ESTABLISHED状态，完成Tcp三次握手。</li>\n</ul>\n<h2 id=\"数据传输完毕，需要断开连接，断开连接需要经历四次挥手\">数据传输完毕，需要断开连接，断开连接需要经历四次挥手<a href=\"post/httpandhttps#数据传输完毕，需要断开连接，断开连接需要经历四次挥手\"></a></h2><ul>\n<li>第一次挥手：主机1（可以是客户端或服务器），设置seq和ack向主机2发送一个FIN报文段，此时主机1进入FIN_WAIT_1状态，表示没有数据要发送给主机2了</li>\n<li>第二次挥手：主机2收到主机1的FIN报文段，向主机1回应一个ACK报文段，表示同意关闭请求，主机1进入FIN_WAIT_2状态。</li>\n<li>第三次挥手：主机2向主机1发送FIN报文段，请求关闭连接，主机2进入LAST_ACK状态。</li>\n<li>第四次挥手：主机1收到主机2的FIN报文段，想主机2回应ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段后，关闭连接。此时主机1等待主机2一段时间后，没有收到回复，证明主机2已经正常关闭，主机1页关闭连接。</li>\n</ul>\n<div class=\"article-img\"><p><img src=\"http://wx2.sinaimg.cn/large/007hzwxWly1g3kvuu52qsj30hs0cbadk.jpg\" alt=\"tcp报文段的首部格式图\" title=\"tcp报文段的首部格式图\" data-zoomable></p></div>\n<h1 id=\"Https协议-SSL协议\">Https协议/SSL协议<a href=\"post/httpandhttps#Https协议-SSL协议\"></a></h1><p>Https协议是以安全为目标的Http通道，简单来说就是Http的安全版。主要是在Http下加入SSL层（现在主流的是SLL/TLS），SSL是Https协议的安全基础。Https默认端口号为443。</p>\n<blockquote>\n<p>http风险</p>\n</blockquote>\n<ul>\n<li>窃听风险：Http采用明文传输数据，第三方可以用获知通信内容</li>\n<li>篡改风险：第三方可以修改通信内容</li>\n<li>冒充风险：第三方可以冒充他人身份进行通信</li>\n</ul>\n<blockquote>\n<p>SSL/TLS协议就是为了解决这些风险而设计</p>\n</blockquote>\n<ul>\n<li>所有信息加密传输，三方窃听通信内容</li>\n<li>具有校验机制，内容一旦被篡改，通信双发立刻会发现</li>\n<li>配备身份证书，防止身份被冒充</li>\n</ul>\n<h2 id=\"SSL发展史\">SSL发展史<a href=\"post/httpandhttps#SSL发展史\"></a></h2><ul>\n<li>1994年NetSpace公司设计SSL协议（Secure Sockets Layout）1.0版本，但未发布。</li>\n<li>1995年NetSpace发布SSL/2.0版本，很快发现有严重漏洞</li>\n<li>1996年发布SSL/3.0版本，得到大规模应用</li>\n<li>1999年，发布了SSL升级版TLS/1.0版本，目前应用最广泛的版本</li>\n<li>2006年和2008年，发布了TLS/1.1版本和TLS/1.2版本</li>\n</ul>\n<h2 id=\"SSL原理及运行过程\">SSL原理及运行过程<a href=\"post/httpandhttps#SSL原理及运行过程\"></a></h2><p>SSL/TLS协议基本思路是采用公钥加密法（最有名的是RSA加密算法）。大概流程是，客户端向服务器索要公钥，然后用公钥加密信息，服务器收到密文，用自己的私钥解密。</p>\n<p>为了防止公钥被篡改，把公钥放在数字证书中，证书可信则公钥可信。公钥加密计算量很大，为了提高效率，服务端和客户端都生成对话秘钥，用它加密信息，而对话秘钥是对称加密，速度非常快。而公钥用来机密对话秘钥。</p>\n<p>过程</p>\n<ul>\n<li>客户端给出协议版本号、一个客户端随机数A（Client random）以及客户端支持的加密方式</li>\n<li>服务端确认双方使用的加密方式，并给出数字证书、一个服务器生成的随机数B（Server random）</li>\n<li>客户端确认数字证书有效，生成一个新的随机数C（Pre-master-secret），使用证书中的公钥对C加密，发送给服务端</li>\n<li>服务端使用自己的私钥解密出C</li>\n<li>客户端和服务器根据约定的加密方法，使用三个随机数ABC，生成对话秘钥，之后的通信都用这个对话秘钥进行加密。</li>\n</ul>\n<h1 id=\"SSL证书\">SSL证书<a href=\"post/httpandhttps#SSL证书\"></a></h1><p>SSL证书是一个二进制文件，里面包含经过认证的网站公钥和一些元数据，需要从经销商购买。</p>\n<p>证书按照认证级别分类</p>\n<ul>\n<li>域名认证（DV=Domain Validation）：最低级别的认证，可以确认申请人拥有这个域名</li>\n<li>公司认证（OV=Organization Validation）：确认域名所有人是哪家公司，证书里面包含公司的信息</li>\n<li>扩展认证（EV=Extended Validation）：最高级别认证，浏览器地址会显示公司名称</li>\n</ul>\n<p>按覆盖范围分类</p>\n<ul>\n<li>单域名证书：只能用于单域名 foo.com证书不用于<a href=\"http://www.foo.com\" target=\"_blank\" rel=\"noopener\">www.foo.com</a></li>\n<li>通配符证书：可用于某个域名及所有一级子域名，比如*.foo.com的证书可用于foo.com，也可以用于<a href=\"http://www.foo.com\" target=\"_blank\" rel=\"noopener\">www.foo.com</a></li>\n<li>多域名证书：可用于多个域名，比如foo.com和bar.com</li>\n</ul>\n<p>认证级别越高，覆盖范围越广的证书，价格越贵。也有免费的证书，为了推广Https，电子前哨基金会成立了Let’s Encrypt提供免费证书。</p>\n<h1 id=\"RSA加密和DH加密\">RSA加密和DH加密<a href=\"post/httpandhttps#RSA加密和DH加密\"></a></h1><h2 id=\"加密算法分类\">加密算法分类<a href=\"post/httpandhttps#加密算法分类\"></a></h2><ul>\n<li>对称加密：甲方和乙方使用同一种加密规则对信息加解密</li>\n<li>非对称加密：乙方生成两把秘钥（公钥和私钥）。公钥是公开的，任何人都可以获取，私钥是保密的，只存在于乙方手中。甲方获取公钥，然后用公钥加密信息，乙方得到密文后，用私钥解密。</li>\n<li>Hash加密：Hash算法是一种单向密码体制，即只有加密过程，没有解密过程</li>\n</ul>\n<p>对称加密算法加解密效率高，速度快，适合大数据量加解密。常见的堆成加密算法有DES、AES、RC5、Blowfish、IDEA</p>\n<p>非对称加密算法复杂，加解密速度慢，但安全性高，一般与对称加密结合使用（对称加密通信内容，非对称加密对称秘钥）。常见的非对称加密算法有RSA、DH、DSA、ECC</p>\n<p>Hash算法特性是：输入值一样，经过哈希函数得到相同的散列值，但并非散列值相同则输入值也相同。常见的Hash加密算法有MD5、SHA-1、SHA-X系列</p>\n<h1 id=\"Http协议和Https协议的对比\">Http协议和Https协议的对比<a href=\"post/httpandhttps#Http协议和Https协议的对比\"></a></h1><ul>\n<li>https协议需要到CA申请证书，大多数情况下需要一定费用</li>\n<li>Http是超文本传输协议，信息采用明文传输，Https则是具有安全性SSL加密传输协议</li>\n<li>Http和Https端口号不一样，Http是80端口，Https是443端口</li>\n<li>Http连接是无状态的，而Https采用Http+SSL构建可进行加密传输、身份认证的网络协议，更安全</li>\n<li>Http协议建立连接的过程比Https协议快。因为Https除了Tcp三次握手，还要经过SSL握手。连接建立之后数据传输速度，二者无明显区别。</li>\n</ul>\n","next":{"title":"java8新特性lambda表达式、方法引用、函数式接口、默认方式、静态方法","slug":"java8部分新特性"},"link":"http://yoursite.com/post/httpandhttps/","toc":[{"title":"网络层结构","id":"网络层结构","index":"1","children":[{"title":"两种模型的区别","id":"两种模型的区别","index":"1.1"}]},{"title":"HTTP协议","id":"HTTP协议","index":"2","children":[{"title":"发展历史","id":"发展历史","index":"2.1"},{"title":"http请求和响应格式","id":"http请求和响应格式","index":"2.2"}]},{"title":"TCP三次握手","id":"TCP三次握手","index":"3","children":[{"title":"三次握手具体流程","id":"三次握手具体流程","index":"3.1"},{"title":"数据传输完毕，需要断开连接，断开连接需要经历四次挥手","id":"数据传输完毕，需要断开连接，断开连接需要经历四次挥手","index":"3.2"}]},{"title":"Https协议/SSL协议","id":"Https协议-SSL协议","index":"4","children":[{"title":"SSL发展史","id":"SSL发展史","index":"4.1"},{"title":"SSL原理及运行过程","id":"SSL原理及运行过程","index":"4.2"}]},{"title":"SSL证书","id":"SSL证书","index":"5"},{"title":"RSA加密和DH加密","id":"RSA加密和DH加密","index":"6","children":[{"title":"加密算法分类","id":"加密算法分类","index":"6.1"}]},{"title":"Http协议和Https协议的对比","id":"Http协议和Https协议的对比","index":"7"}]}