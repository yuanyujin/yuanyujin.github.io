{"title":"Field类","date":"2019-05-18T12:00:00.000Z","slug":"Field","tags":["Field","java"],"categories":["java"],"updated":"2019-05-18T14:05:13.713Z","content":"<p>Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。</p>\n<h1 id=\"Field-成员变量的介绍\">Field 成员变量的介绍<a href=\"post/Field#Field-成员变量的介绍\"></a></h1><blockquote>\n<p>每个成员变量有类型和值。java.lang.reflect.Field 为我们提供了获取当前对象的成员变量的类型，和重新设值的方法。</p>\n</blockquote>\n<h1 id=\"获取变量的类型\">获取变量的类型<a href=\"post/Field#获取变量的类型\"></a></h1><p>类中的变量分为两种类型：基本类型和引用类型：</p>\n<ul>\n<li>基本类型（ 8 种） <ul>\n<li>整数：byte, short, int, long</li>\n<li>浮点数：float, double</li>\n<li>字符：char</li>\n<li>布尔值：boolean</li>\n</ul>\n</li>\n<li>引用类型 <ul>\n<li>所有的引用类型都继承自 java.lang.Object</li>\n<li>类，枚举，数组，接口都是引用类型</li>\n<li>java.io.Serializable 接口，基本类型的包装类（比如 java.lang.Double）也是引用类型</li>\n</ul>\n</li>\n</ul>\n<p>java.lang.reflect.Field 提供了两个方法获去变量的类型：</p>\n<blockquote>\n<p>Field.getType()：返回这个变量的类型</p>\n</blockquote>\n<blockquote>\n<p>Field.getGenericType()：如果当前属性有签名属性类型就返回，否则就返回 Field.getType()</p>\n</blockquote>\n<blockquote>\n<p>field.getType()和field.getGenericType()的区别就是返回类型不一样</p>\n</blockquote>\n<h1 id=\"获取成员变量的修饰符\">获取成员变量的修饰符<a href=\"post/Field#获取成员变量的修饰符\"></a></h1><p>成员变量可以被以下修饰符修饰：</p>\n<ul>\n<li>访问权限控制符：public, protected, private</li>\n<li>限制只能有一个实例的：static</li>\n<li>不允许修改的：final</li>\n<li>不会被序列化：transient</li>\n<li>线程共享数据的一致性：volatile</li>\n<li>注解</li>\n</ul>\n<p>类似获取 Class 的修饰符，我们可以使用 Field.getModifiers() 方法获取当前成员变量的修饰符。<br>返回 java.lang.reflect.Modifier 中定义的整形值。然后使用 Modifier.toString(int mod)解码成字符串</p>\n<p>由于 Field 间接继承了 java.lang.reflect.AnnotatedElement ，因此运行时也可以获得修饰成员变量的注解，当然前提是这个注解被 java.lang.annotation.RetentionPolicy.RUNTIME 修饰。</p>\n<h1 id=\"获取和修改成员变量的值\">获取和修改成员变量的值<a href=\"post/Field#获取和修改成员变量的值\"></a></h1><p>拿到一个对象后，我们可以在运行时修改它的成员变量的值，对运行时来说，反射修改变量值的操作和类中修改变量的结果是一样的。</p>\n<ul>\n<li><p>基本类型的getter方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte getByte(Object obj) </span><br><span class=\"line\">    获取一个静态或实例 byte 字段的值。 </span><br><span class=\"line\">int getInt(Object obj) </span><br><span class=\"line\">    获取 int 类型或另一个通过扩展转换可以转换为 int 类型的基本类型的静态或实例字段的值。 </span><br><span class=\"line\"> short getShort(Object obj) </span><br><span class=\"line\">    获取 short 类型或另一个通过扩展转换可以转换为 short 类型的基本类型的静态或实例字段的值。 </span><br><span class=\"line\"> long getLong(Object obj) </span><br><span class=\"line\">    获取 long 类型或另一个通过扩展转换可以转换为 long 类型的基本类型的静态或实例字段的值。 </span><br><span class=\"line\"> float getFloat(Object obj) </span><br><span class=\"line\">    获取 float 类型或另一个通过扩展转换可以转换为 float 类型的基本类型的静态或实例字段的值。 </span><br><span class=\"line\"> double getDouble(Object obj) </span><br><span class=\"line\">    获取 double 类型或另一个通过扩展转换可以转换为 double 类型的基本类型的静态或实例字段的值。 </span><br><span class=\"line\"> boolean getBoolean(Object obj) </span><br><span class=\"line\">    获取一个静态或实例 boolean 字段的值。 </span><br><span class=\"line\"> char getChar(Object obj) </span><br><span class=\"line\">    获取 char 类型或另一个通过扩展转换可以转换为 char 类型的基本类型的静态或实例字段的值。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基本类型的setter</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void setByte(Object obj, byte b) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 byte 值。 </span><br><span class=\"line\"> void setShort(Object obj, short s) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 short 值。</span><br><span class=\"line\"> void setInt(Object obj, int i) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 int 值。 </span><br><span class=\"line\"> void setLong(Object obj, long l) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 long 值。 </span><br><span class=\"line\"> void setFloat(Object obj, float f) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 float 值。</span><br><span class=\"line\"> void setDouble(Object obj, double d) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 double 值。</span><br><span class=\"line\"> void setBoolean(Object obj, boolean z) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 boolean 值。 </span><br><span class=\"line\"> void setChar(Object obj, char c) </span><br><span class=\"line\">    将字段的值设置为指定对象上的一个 char 值。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>引用类型的getter</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object get(Object obj) </span><br><span class=\"line\">    返回指定对象上此 Field 表示的字段的值。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>引用类型的setter</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void set(Object obj, Object value) </span><br><span class=\"line\">    将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>再说一下setAccessible()方法，Field的setAccessible()方法是从AccessibleObject类继承而来的。AccessibleObject 类是 Field、Method 和 Constructor 对象的基类。<br>它提供了在使用时 取消默认 Java 语言访问控制检查的能力。<br>一般情况下，我们并不能对类的私有字段进行操作，利用反射也不例外，但有的时候，例如要序列化的时候，我们又必须有能力去处理这些字段，这时候，我们就需要调用AccessibleObject上的setAccessible()方法来允许这种访问，而由于反射类中的Field，Method和Constructor继承自AccessibleObject，因此，通过在Field，Method和Constructor这些类上调用setAccessible()方法，我们可以操作这些字段无法访问的字段。</p>\n</blockquote>\n<h1 id=\"其他方法\">其他方法<a href=\"post/Field#其他方法\"></a></h1><ul>\n<li>boolean</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean equals(Object obj) </span><br><span class=\"line\">    将此 Field 与指定对象比较。 </span><br><span class=\"line\">boolean isEnumConstant() </span><br><span class=\"line\">    如果此字段表示枚举类型的元素，则返回 true；否则返回 false。 </span><br><span class=\"line\">boolean isSynthetic() </span><br><span class=\"line\">    如果此字段是复合字段，则返回 true；否则返回 false。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>String</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String getName() </span><br><span class=\"line\">    返回此 Field 对象表示的字段的名称。 </span><br><span class=\"line\">String toGenericString() </span><br><span class=\"line\">    返回一个描述此 Field（包括其一般类型）的字符串。 </span><br><span class=\"line\">String toString() </span><br><span class=\"line\">    返回一个描述此 Field 的字符串。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其他</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int hashCode()</span><br><span class=\"line\">    返回该 Field 的哈希码。</span><br><span class=\"line\">boolean equals(Object obj)</span><br><span class=\"line\">    将此 Field 与指定对象比较。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>equals()和hashCode()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T extends Annotation&gt; T  getAnnotation(Class&lt;T&gt; annotationClass)</span><br><span class=\"line\">    如果存在该元素的指定类型的注释，则返回这些注释，否则返回 null。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回注释的方法：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Annotation[] getDeclaredAnnotations()</span><br><span class=\"line\">    返回直接存在于此元素上的所有注释。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回字段所在的类或者接口的Class对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; getDeclaringClass()</span><br><span class=\"line\">    返回表示类或接口的 Class 对象，该类或接口声明由此 Field 对象表示的字段。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回字段的类型（Type）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type getGenericType()</span><br><span class=\"line\">    返回一个 Type 对象，它表示此 Field 对象所表示字段的声明类型。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回修饰符编码</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getModifiers()</span><br><span class=\"line\">    以整数形式返回由此 Field 对象表示的字段的 Java 语言修饰符。</span><br></pre></td></tr></table></figure>","prev":{"title":"java8新特性lambda表达式、方法引用、函数式接口、默认方式、静态方法","slug":"java8部分新特性"},"next":{"title":"Method类","slug":"Method"},"link":"http://yoursite.com/post/Field/","toc":[{"title":"Field 成员变量的介绍","id":"Field-成员变量的介绍","index":"1"},{"title":"获取变量的类型","id":"获取变量的类型","index":"2"},{"title":"获取成员变量的修饰符","id":"获取成员变量的修饰符","index":"3"},{"title":"获取和修改成员变量的值","id":"获取和修改成员变量的值","index":"4"},{"title":"其他方法","id":"其他方法","index":"5"}]}