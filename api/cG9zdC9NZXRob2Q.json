{"title":"Method类","date":"2019-05-18T12:00:00.000Z","slug":"Method","tags":["Method","java"],"categories":["java"],"updated":"2019-05-18T14:28:43.933Z","content":"<p>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息。</p>\n<p>一个完整方法包含的属性有：</p>\n<ul>\n<li>方法上使用的注解</li>\n<li>方法的修饰符</li>\n<li>方法上定义的泛型参数</li>\n<li>方法的返回值</li>\n<li>方法名称</li>\n<li>方法参数(泛型、注解)</li>\n<li>方法抛出的异常</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@MyAnnotation</span><br><span class=\"line\">public &lt;T&gt; boolean add(List&lt;T&gt; list,T...params)throws RuntimeException,Exception&#123;</span><br><span class=\"line\">\tif(null==list)&#123;</span><br><span class=\"line\">\t\tthrow new RuntimeException(&quot;list=null&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif(null==params)&#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//将参数添加到List集合中</span><br><span class=\"line\">\tif(null!=params)&#123;</span><br><span class=\"line\">\t\tfor(T t:params)&#123;</span><br><span class=\"line\">\t\t\tlist.add(t);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注解：@MyAnnotation</p>\n<p>修饰符：public</p>\n<p>泛型参数：T</p>\n<p>返回值：boolean</p>\n<p>方法名：add</p>\n<p>方法参数(泛型、注解)：List<t> list，T…params</t></p>\n<p>抛出的异常：RuntimeException，Exception</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class MethodTest &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * 一个完整方法包含的属性有： 方法上使用的注解、方法的修饰符、方法上定义的泛型参数、方法的返回值、方法名称、方法参数(泛型、注解)、方法抛出的异常</span><br><span class=\"line\">\t */</span><br><span class=\"line\">\t@MyAnnotation</span><br><span class=\"line\">\tprivate &lt;T&gt; boolean add(@MyAnnotation List&lt;T&gt; list, T... params) throws RuntimeException,</span><br><span class=\"line\">\t\t\tException &#123;</span><br><span class=\"line\">\t\tif (null == list) &#123;</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(&quot;list=null&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tif (null == params) &#123;</span><br><span class=\"line\">\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 将参数添加到List集合中</span><br><span class=\"line\">\t\tif (null != params) &#123;</span><br><span class=\"line\">\t\t\tfor (T t : params) &#123;</span><br><span class=\"line\">\t\t\t\tlist.add(t);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">\t\t// 获取Method</span><br><span class=\"line\">\t\tMethodTest obj = new MethodTest();</span><br><span class=\"line\">\t\tClass&lt;? extends MethodTest&gt; clazz = obj.getClass();</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tMethod method = clazz.getDeclaredMethod(&quot;add&quot;, List.class,</span><br><span class=\"line\">\t\t\t\tObject[].class);</span><br><span class=\"line\">\t\tif (!method.isAccessible()) &#123;</span><br><span class=\"line\">\t\t\tmethod.setAccessible(true);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        //获取方法基本信息</span><br><span class=\"line\">\t\tgetMethodInfo(method);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 调用方法</span><br><span class=\"line\">\t\tList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\tmethod.invoke(obj, arrayList, new String[] &#123; &quot;1&quot;, &quot;2&quot; &#125;);</span><br><span class=\"line\">\t\tSystem.out.println(arrayList);//[1,2]</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//方法定义所在的类</span><br><span class=\"line\">\t\tClass&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 如果此方法是 bridge 方法，则返回 true；</span><br><span class=\"line\">\t\tboolean bridge = method.isBridge();</span><br><span class=\"line\">\t\t//如果该方法是public非抽象非静态，且定义在接口中，则返回true</span><br><span class=\"line\">\t\tboolean default1 = method.isDefault(); //false</span><br><span class=\"line\">\t\t//如果此方法为复合方法，则返回 true；</span><br><span class=\"line\">\t\tboolean synthetic = method.isSynthetic();//false</span><br><span class=\"line\">\t\t// 如果将此方法的参数带有可变参数，则返回 true</span><br><span class=\"line\">\t\tboolean varArgs = method.isVarArgs(); //true</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tprivate static void getMethodInfo(Method method) &#123;</span><br><span class=\"line\">\t\t// 1、获取方法上的注解</span><br><span class=\"line\">\t\tboolean annotationPresent = method</span><br><span class=\"line\">\t\t\t\t.isAnnotationPresent(MyAnnotation.class);</span><br><span class=\"line\">\t\tif (annotationPresent) &#123;</span><br><span class=\"line\">\t\t\tMyAnnotation myAnnotation = method</span><br><span class=\"line\">\t\t\t\t\t.getDeclaredAnnotation(MyAnnotation.class);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t// 2、方法的修饰符</span><br><span class=\"line\">\t\tint modifiers = method.getModifiers();</span><br><span class=\"line\">\t\tString modify = Modifier.toString(modifiers);// private</span><br><span class=\"line\">\t\t// 3、方法上定义的泛型参数</span><br><span class=\"line\">\t\tTypeVariable&lt;Method&gt;[] typeParameters = method.getTypeParameters();// [T]</span><br><span class=\"line\">\t\t// 4、方法的返回值</span><br><span class=\"line\">\t\tClass&lt;?&gt; returnType = method.getReturnType();// boolean</span><br><span class=\"line\">\t\tType genericReturnType = method.getGenericReturnType();// boolean</span><br><span class=\"line\">\t\t// 5、方法名称</span><br><span class=\"line\">\t\tString name = method.getName();</span><br><span class=\"line\">\t\t// 6、方法参数</span><br><span class=\"line\">\t\tint parameterCount = method.getParameterCount();// 参数个数 2</span><br><span class=\"line\">\t\t// 方法参数——泛型</span><br><span class=\"line\">\t\tClass&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class=\"line\">\t\t// 打印 [interface java.util.List, class [Ljava.lang.Object;]</span><br><span class=\"line\">\t\tType[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class=\"line\">\t\t// 打印 [java.util.List&lt;T&gt;, T[]]</span><br><span class=\"line\">\t\tfor (Type type : genericParameterTypes) &#123;</span><br><span class=\"line\">\t\t\tif (type instanceof ParameterizedType) &#123; // 参数类型</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;ParameterizedType类型：&quot; + type);</span><br><span class=\"line\">\t\t\t\tParameterizedType parameterizedType = (ParameterizedType) type;</span><br><span class=\"line\">\t\t\t\tType[] actualTypeArguments = parameterizedType</span><br><span class=\"line\">\t\t\t\t\t\t.getActualTypeArguments();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;实际参数为：&quot;</span><br><span class=\"line\">\t\t\t\t\t\t+ Arrays.toString(actualTypeArguments));</span><br><span class=\"line\">\t\t\t\tfor (Type actualType : actualTypeArguments) &#123;</span><br><span class=\"line\">\t\t\t\t\tif (actualType instanceof WildcardType) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tWildcardType wildcardType = (WildcardType) actualTypeArguments[0];</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(&quot;实际参数为WildcardType类型：&quot;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t+ wildcardType.getUpperBounds());</span><br><span class=\"line\">\t\t\t\t\t&#125; else if (actualType instanceof Class) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(&quot;实际参数为Class类型：&quot; + actualType);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\t&#125; else if (type instanceof GenericArrayType) &#123; // 泛型数组类型 T[]</span><br><span class=\"line\">\t\t\t\tGenericArrayType genericArrayType = (GenericArrayType) type;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;GenericArrayType类型：&quot;</span><br><span class=\"line\">\t\t\t\t\t\t+ genericArrayType.getGenericComponentType());//T</span><br><span class=\"line\">\t\t\t&#125; else if (type instanceof TypeVariable) &#123; // 泛型变量</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;TypeVariable类型：&quot; + type);</span><br><span class=\"line\">\t\t\t&#125; else if (type instanceof Class) &#123; //</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Class类型：&quot; + type);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\t * 方法有2个参数，第一个参数list为ParameterizedType，实际参数为T，</span><br><span class=\"line\">\t\t * 第二个参数为GenericArrayType泛型数组类型T[],数组元素类型为T</span><br><span class=\"line\">\t\t */</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//方法参数——注解   第一个参数使用了注解</span><br><span class=\"line\">\t\tAnnotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class=\"line\">\t\tAnnotation myAnnotation=parameterAnnotations[0][0];</span><br><span class=\"line\">\t\t//打印 @reflect.MyAnnotation(intValue=0)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 7、方法抛出的异常</span><br><span class=\"line\">\t\tClass&lt;?&gt;[] exceptionTypes = method.getExceptionTypes();</span><br><span class=\"line\">\t\t// 打印 [class java.lang.RuntimeException, class java.lang.Exception]</span><br><span class=\"line\">\t\tType[] genericExceptionTypes = method.getGenericExceptionTypes();</span><br><span class=\"line\">\t\t// 打印 [class java.lang.RuntimeException, class java.lang.Exception]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Method类的invoke(Object obj,Object args[])方法接收的参数必须为对象,如果参数为基本类型数据,必须转换为相应的包装类型的对象。invoke()方法的返回值总是对象,如果实际被调用的方法的返回类型是基本类型数据,那么invoke()方法会把它转换为相应的包装类型的对象,再将其返回.</p>\n</blockquote>\n","prev":{"title":"java8新特性lambda表达式、方法引用、函数式接口、默认方式、静态方法","slug":"java8部分新特性"},"next":{"title":"Field类","slug":"Field"},"link":"http://yoursite.com/post/Method/"}