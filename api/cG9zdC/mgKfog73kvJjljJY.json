{"title":"java性能优化","date":"2019-07-18T01:40:00.000Z","slug":"性能优化","tags":["性能优化"],"categories":["java"],"updated":"2019-07-20T12:46:18.994Z","content":"<h3 id=\"尽量指定类、方法的final修饰符\">尽量指定类、方法的final修饰符<a href=\"post/性能优化#尽量指定类、方法的final修饰符\"></a></h3><p>带有final修饰符的类是不可派生的。在Java核心API中，有许多应用final的例子，例如java.lang.String，整个类都是final的。为类指定final修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写。如果指定了一个类为final，则该类所有的方法都是final的。Java编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大，具体参见Java运行期优化。此举能够使性能平均提高50%。</p>\n<h3 id=\"尽量重用对象\">尽量重用对象<a href=\"post/性能优化#尽量重用对象\"></a></h3><p>特别是String对象的使用，出现字符串连接时应该使用StringBuilder/StringBuffer代替。由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。</p>\n<h3 id=\"尽可能使用局部变量\">尽可能使用局部变量<a href=\"post/性能优化#尽可能使用局部变量\"></a></h3><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中，速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</p>\n<h3 id=\"及时关闭流\">及时关闭流<a href=\"post/性能优化#及时关闭流\"></a></h3><p>Java编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。</p>\n<h3 id=\"尽量减少对变量的重复计算\">尽量减少对变量的重复计算<a href=\"post/性能优化#尽量减少对变量的重复计算\"></a></h3><p>明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。</p>\n<p>所以例如下面的操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0; i &lt; list.size(); i++)</span><br><span class=\"line\">&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p>建议替换为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0, length = list.size(); i &lt; length; i++)</span><br><span class=\"line\">&#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样，在list.size()很大的时候，就减少了很多的消耗</p>\n<h3 id=\"尽量采用懒加载的策略，即在需要的时候才创建\">尽量采用懒加载的策略，即在需要的时候才创建<a href=\"post/性能优化#尽量采用懒加载的策略，即在需要的时候才创建\"></a></h3><p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = &quot;aaa&quot;;</span><br><span class=\"line\">if (i == 1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　list.add(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>建议替换为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (i == 1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　String str = &quot;aaa&quot;;</span><br><span class=\"line\">　　list.add(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"慎用异常\">慎用异常<a href=\"post/性能优化#慎用异常\"></a></h3><p>异常对性能不利。抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本地同步方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。</p>\n<h3 id=\"不要在循环中使用try…catch…，应该把其放在最外层\">不要在循环中使用try…catch…，应该把其放在最外层<a href=\"post/性能优化#不要在循环中使用try…catch…，应该把其放在最外层\"></a></h3><p>根据网友们提出的意见，这一点我认为值得商榷，欢迎大家提出看法！</p>\n<h3 id=\"如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度\">如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度<a href=\"post/性能优化#如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度\"></a></h3><p>比如ArrayList、LinkedLlist、StringBuilder、StringBuffer、HashMap、HashSet等等，以StringBuilder为例：</p>\n<ul>\n<li>StringBuilder()// 默认分配16个字符的空间</li>\n<li>StringBuilder(int size)　　// 默认分配size个字符的空间</li>\n<li>StringBuilder(String str)　// 默认分配16个字符+str.length()个字符空间</li>\n</ul>\n<p>可以通过类（这里指的不仅仅是上面的StringBuilder）的构造函数来设定它的初始化容量，这样可以明显地提升性能。比如StringBuilder吧，length表示当前的StringBuilder能保持的字符数量。</p>\n<p>因为当StringBuilder达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，无论何时只要StringBuilder达到它的最大容量，它就不得不创建一个新的字符数组然后将旧的字符数组内容拷贝到新字符数组中—-这是十分耗费性能的一个操作。试想，如果能预估到字符数组中大概要存放5000个字符而不指定长度，最接近5000的2次幂是4096，每次扩容加的2不管，那么：</p>\n<p>在4096 的基础上，再申请8194个大小的字符数组，加起来相当于一次申请了12290个大小的字符数组，如果一开始能指定5000个大小的字符数组，就节省了一倍以上的空间<br>把原来的4096个字符拷贝到新的的字符数组中去<br>这样，既浪费内存空间又降低代码运行效率。所以，给底层以数组实现的集合、工具类设置一个合理的初始化容量是错不了的，这会带来立竿见影的效果。</p>\n<p>但是，注意，像HashMap这种是以数组+链表实现的集合，别把初始大小和你估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0。初始大小建议设置为2的N次幂，如果能估计到有2000个元素，设置成new HashMap(128)、new HashMap(256)都可以。</p>\n<h3 id=\"当复制大量数据时，使用System-arraycopy-命令\">当复制大量数据时，使用System.arraycopy()命令<a href=\"post/性能优化#当复制大量数据时，使用System-arraycopy-命令\"></a></h3><h3 id=\"乘法和除法使用移位操作\">乘法和除法使用移位操作<a href=\"post/性能优化#乘法和除法使用移位操作\"></a></h3><p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (val = 0; val &lt; 100000; val += 5)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　a = val * 8;</span><br><span class=\"line\">　　b = val / 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便、最快的，因此建议修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (val = 0; val &lt; 100000; val += 5)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">　　a = val &lt;&lt; 3;</span><br><span class=\"line\">　　b = val &gt;&gt; 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>移位操作虽然快，但是可能会使代码不太好理解，因此最好加上相应的注释。</p>\n<h3 id=\"循环内不要不断创建对象引用\">循环内不要不断创建对象引用<a href=\"post/性能优化#循环内不要不断创建对象引用\"></a></h3><p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= count; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Object obj = new Object();    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存了，建议为改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object obj = null;</span><br><span class=\"line\">for (int i = 0; i &lt;= count; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    obj = new Object();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样的话，内存中只有一份Object对象引用，每次new Object()的时候，Object对象引用指向不同的Object罢了，但是内存中只有一份，这样就大大节省了内存空间了。</p>\n<h3 id=\"基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList\">基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList<a href=\"post/性能优化#基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList\"></a></h3><h3 id=\"尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销\">尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销<a href=\"post/性能优化#尽量使用HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销\"></a></h3><h3 id=\"不要将数组声明为public-static-final\">不要将数组声明为public static final<a href=\"post/性能优化#不要将数组声明为public-static-final\"></a></h3><p>因为这毫无意义，这样只是定义了引用为static final，数组的内容还是可以随意改变的，将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变</p>\n<h3 id=\"尽量在合适的场合使用单例\">尽量在合适的场合使用单例<a href=\"post/性能优化#尽量在合适的场合使用单例\"></a></h3><p>使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：</p>\n<p>控制资源的使用，通过线程同步来控制资源的并发访问<br>控制实例的产生，以达到节约资源的目的<br>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</p>\n<h3 id=\"尽量避免随意使用静态变量\">尽量避免随意使用静态变量<a href=\"post/性能优化#尽量避免随意使用静态变量\"></a></h3><p>要知道，当某个对象被定义为static的变量所引用，那么gc通常是不会回收这个对象所占有的堆内存的，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static B b = new B();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此时静态变量b的生命周期与A类相同，如果A类不被卸载，那么引用B指向的B对象会常驻内存，直到程序终止</p>\n<h3 id=\"及时清除不再需要的会话\">及时清除不再需要的会话<a href=\"post/性能优化#及时清除不再需要的会话\"></a></h3><p>为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多的会话时，如果内存不足，那么操作系统会把部分数据转移到磁盘，应用服务器也可能根据MRU（最近最频繁使用）算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁盘，那么必须要先被序列化，在大规模集群中，对对象进行序列化的代价是很昂贵的。因此，当会话不再需要时，应当及时调用HttpSession的invalidate()方法清除会话。</p>\n<h3 id=\"实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历\">实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历<a href=\"post/性能优化#实现RandomAccess接口的集合比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历\"></a></h3><p>这是JDK推荐给用户的。JDK API对于RandomAccess接口的解释是：实现RandomAccess接口用来表明其支持快速随机访问，此接口的主要目的是允许一般的算法更改其行为，从而将其应用到随机或连续访问列表时能提供良好的性能。</p>\n<p>实际经验表明，实现RandomAccess接口的类实例，假如是随机访问的，使用普通for循环效率将高于使用foreach循环；反过来，如果是顺序访问的，则使用Iterator会效率更高。</p>\n<p>可以使用类似如下的代码作判断：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (list instanceof RandomAccess)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (int i = 0; i &lt; list.size(); i++)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Iterator&lt;?&gt; iterator = list.iterable();</span><br><span class=\"line\">    while (iterator.hasNext())&#123;iterator.next()&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n<p>foreach循环的底层实现原理就是迭代器Iterator，可变长度参数以及foreach循环原理。所以后半句”反过来，如果是顺序访问的，则使用Iterator会效率更高”的意思就是顺序访问的那些类实例，使用foreach循环去遍历。</p>\n<p><a href=\"http://www.cnblogs.com/xrq730/p/4868465.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xrq730/p/4868465.html</a></p>\n<h3 id=\"使用同步代码块替代同步方法\">使用同步代码块替代同步方法<a href=\"post/性能优化#使用同步代码块替代同步方法\"></a></h3><p>这点在多线程模块中的synchronized锁方法块一文中已经讲得很清楚了，除非能确定一整个方法都是需要进行同步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，影响了代码执行效率。</p>\n<p><a href=\"http://www.cnblogs.com/xrq730/p/4851530.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xrq730/p/4851530.html</a></p>\n<h3 id=\"将常量声明为static-final，并以大写命名\">将常量声明为static final，并以大写命名<a href=\"post/性能优化#将常量声明为static-final，并以大写命名\"></a></h3><p>这样在编译期间就可以把这些内容放入常量池中，避免运行期间计算生成常量的值。另外，将常量的名字以大写命名也可以方便区分出常量与变量</p>\n<h3 id=\"不要创建一些不使用的对象，不要导入一些不使用的类\">不要创建一些不使用的对象，不要导入一些不使用的类<a href=\"post/性能优化#不要创建一些不使用的对象，不要导入一些不使用的类\"></a></h3><p>这毫无意义，如果代码中出现The value of the local variable i is not used”、”The import java.util is never used，那么请删除这些无用的内容</p>\n<h3 id=\"程序运行过程中避免使用反射\">程序运行过程中避免使用反射<a href=\"post/性能优化#程序运行过程中避免使用反射\"></a></h3><p>反射是Java提供给用户一个很强大的功能，功能强大往往意味着效率不高。不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是Method的invoke方法，如果确实有必要，一种建议性的做法是将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存—-用户只关心和对端交互的时候获取最快的响应速度，并不关心对端的项目启动花多久时间。</p>\n<p><a href=\"http://www.cnblogs.com/xrq730/p/4862111.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xrq730/p/4862111.html</a></p>\n<h3 id=\"使用数据库连接池和线程池\">使用数据库连接池和线程池<a href=\"post/性能优化#使用数据库连接池和线程池\"></a></h3><p>这两个池都是用于重用对象的，前者可以避免频繁地打开和关闭连接，后者可以避免频繁地创建和销毁线程</p>\n<h3 id=\"使用带缓冲的输入输出流进行IO操作\">使用带缓冲的输入输出流进行IO操作<a href=\"post/性能优化#使用带缓冲的输入输出流进行IO操作\"></a></h3><p>带缓冲的输入输出流，即BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升IO效率</p>\n<h3 id=\"顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList\">顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList<a href=\"post/性能优化#顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList\"></a></h3><p>这个，理解ArrayList和LinkedList的原理就知道了</p>\n<h3 id=\"不要让public方法中有太多的形参\">不要让public方法中有太多的形参<a href=\"post/性能优化#不要让public方法中有太多的形参\"></a></h3><p>public方法即对外提供的方法，如果给这些方法太多形参的话主要有两点坏处：</p>\n<p>违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合<br>参数太多势必导致方法调用的出错概率增加<br>至于这个”太多”指的是多少个，3、4个吧。比如我们用JDBC写一个insertStudentInfo方法，有10个学生信息字段要插如Student表中，可以把这10个参数封装在一个实体类中，作为insert方法的形参</p>\n<h3 id=\"字符串变量和字符串常量equals的时候将字符串常量写在前面\">字符串变量和字符串常量equals的时候将字符串常量写在前面<a href=\"post/性能优化#字符串变量和字符串常量equals的时候将字符串常量写在前面\"></a></h3><p>这是一个比较常见的小技巧了，如果有以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = &quot;123&quot;;</span><br><span class=\"line\">if (str.equals(&quot;123&quot;))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建议修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = &quot;123&quot;;</span><br><span class=\"line\">if (&quot;123&quot;.equals(str))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这么做主要是可以避免空指针异常</p>\n<h3 id=\"请知道，在java中if-i-1-和if-1-i-是没有区别的，但从阅读习惯上讲，建议使用前者\">请知道，在java中if (i == 1)和if (1 == i)是没有区别的，但从阅读习惯上讲，建议使用前者<a href=\"post/性能优化#请知道，在java中if-i-1-和if-1-i-是没有区别的，但从阅读习惯上讲，建议使用前者\"></a></h3><p>平时有人问，if (i == 1)和if (1== i)有没有区别，这就要从C/C++讲起。</p>\n<p>在C/C++中，if (i == 1)判断条件成立，是以0与非0为基准的，0表示false，非0表示true，如果有这么一段代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 2;</span><br><span class=\"line\">if (i == 1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>C/C++判断i==1不成立，所以以0表示，即false。但是如果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 2;</span><br><span class=\"line\">if (i = 1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>万一程序员一个不小心，把if (i == 1)写成if (i = 1)，这样就有问题了。在if之内将i赋值为1，if判断里面的内容非0，返回的就是true了，但是明明i为2，比较的值是1，应该返回的false。这种情况在C/C++的开发中是很可能发生的并且会导致一些难以理解的错误产生，所以，为了避免开发者在if语句中不正确的赋值操作，建议将if语句写为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = 2;</span><br><span class=\"line\">if (1 == i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样，即使开发者不小心写成了1 = i，C/C++编译器也可以第一时间检查出来，因为我们可以对一个变量赋值i为1，但是不能对一个常量赋值1为i。</p>\n<p>但是，在Java中，C/C++这种if (i = 1)的语法是不可能出现的，因为一旦写了这种语法，Java就会编译报错Type mismatch: cannot convert from int to boolean。但是，尽管Java的if (i == 1)和if (1 == i)在语义上没有任何区别，从阅读习惯上讲，建议使用前者会更好些。</p>\n<h3 id=\"不要对数组使用toString-方法\">不要对数组使用toString()方法<a href=\"post/性能优化#不要对数组使用toString-方法\"></a></h3><p>看一下对数组使用toString()打印出来的是什么：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int[] is = new int[]&#123;1, 2, 3&#125;;</span><br><span class=\"line\">    System.out.println(is.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果是：</p>\n<p>[I@18a992f<br>本意是想打印出数组内容，却有可能因为数组引用is为空而导致空指针异常。不过虽然对数组toString()没有意义，但是对集合toString()是可以打印出集合里面的内容的，因为集合的父类AbstractCollections<e>重写了Object的toString()方法。</e></p>\n<h3 id=\"不要对超出范围的基本数据类型做向下强制转型\">不要对超出范围的基本数据类型做向下强制转型<a href=\"post/性能优化#不要对超出范围的基本数据类型做向下强制转型\"></a></h3><p>这绝不会得到想要的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long l = 12345678901234L;</span><br><span class=\"line\">    int i = (int)l;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可能期望得到其中的某几位，但是结果却是：<br>1942892530</p>\n<p>解释一下。Java中long是8个字节64位的，所以12345678901234在计算机中的表示应该是：<br>0000 0000 0000 0000 0000 1011 0011 1010 0111 0011 1100 1110 0010 1111 1111 0010<br>一个int型数据是4个字节32位的，从低位取出上面这串二进制数据的前32位是：<br>0111 0011 1100 1110 0010 1111 1111 0010<br>这串二进制表示为十进制1942892530，所以就是我们上面的控制台上输出的内容。</p>\n<p>从这个例子上还能顺便得到两个结论：</p>\n<p>整型默认的数据类型是int，long l = 12345678901234L，这个数字已经超出了int的范围了，所以最后有一个L，表示这是一个long型数。顺便，浮点型的默认类型是double，所以定义float的时候要写成float f = 3.5f<br>接下来再写一句int ii = l + i;会报错，因为long + int是一个long，不能赋值给int</p>\n<h3 id=\"公用的集合类中不使用的数据一定要及时remove掉\">公用的集合类中不使用的数据一定要及时remove掉<a href=\"post/性能优化#公用的集合类中不使用的数据一定要及时remove掉\"></a></h3><p>如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。</p>\n<h3 id=\"把一个基本数据类型转为字符串，基本数据类型-toString-是最快的方式、String-valueOf-数据-次之、数据-””最慢\">把一个基本数据类型转为字符串，基本数据类型.toString()是最快的方式、String.valueOf(数据)次之、数据+””最慢<a href=\"post/性能优化#把一个基本数据类型转为字符串，基本数据类型-toString-是最快的方式、String-valueOf-数据-次之、数据-””最慢\"></a></h3><p>把一个基本数据类型转为一般有三种方式，我有一个Integer型数据i，可以使用i.toString()、String.valueOf(i)、i+””三种方式</p>\n<p>三种方式的效率如何，看一个测试：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int loopTime = 50000;</span><br><span class=\"line\">    Integer i = 0;</span><br><span class=\"line\">    long startTime = System.currentTimeMillis();</span><br><span class=\"line\">    for (int j = 0; j &lt; loopTime; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        String str = String.valueOf(i);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    System.out.println(&quot;String.valueOf()：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);</span><br><span class=\"line\">    startTime = System.currentTimeMillis();</span><br><span class=\"line\">    for (int j = 0; j &lt; loopTime; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        String str = i.toString();</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    System.out.println(&quot;Integer.toString()：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);</span><br><span class=\"line\">    startTime = System.currentTimeMillis();</span><br><span class=\"line\">    for (int j = 0; j &lt; loopTime; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        String str = i + &quot;&quot;;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    System.out.println(&quot;i + \\&quot;\\&quot;：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.valueOf()：11ms</span><br><span class=\"line\">Integer.toString()：5ms</span><br><span class=\"line\">i + &quot;&quot;：25ms</span><br></pre></td></tr></table></figure></p>\n<p>所以以后遇到把一个基本数据类型转为String的时候，优先考虑使用toString()方法。</p>\n<p>至于为什么，很简单：String.valueOf()方法底层调用了Integer.toString()方法，但是会在调用前做空判断<br>Integer.toString()方法就不说了，直接调用了<br>i + “”底层使用了StringBuilder实现，先用append方法拼接，再用toString()方法获取字符串<br>三者对比下来，明显是2最快、1次之、3最慢</p>\n<h3 id=\"使用最有效率的方式去遍历Map\">使用最有效率的方式去遍历Map<a href=\"post/性能优化#使用最有效率的方式去遍历Map\"></a></h3><p>遍历Map的方式有很多，通常场景下我们需要的是遍历Map中的Key和Value，那么推荐使用的、效率最高的方式是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">    hm.put(&quot;111&quot;, &quot;222&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = hm.entrySet();</span><br><span class=\"line\">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = entrySet.iterator();</span><br><span class=\"line\">    while (iter.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Map.Entry&lt;String, String&gt; entry = iter.next();</span><br><span class=\"line\">        System.out.println(entry.getKey() + &quot;\\t&quot; + entry.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你只是想遍历一下这个Map的key值，那用Set<string> keySet = hm.keySet();会比较合适一些</string></p>\n<h3 id=\"对资源的close-建议分开操作\">对资源的close()建议分开操作<a href=\"post/性能优化#对资源的close-建议分开操作\"></a></h3><p>意思是，比如我有这么一段代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    XXX.close();</span><br><span class=\"line\">    YYY.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (Exception e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>建议修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    XXX.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (Exception e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">try</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    YYY.close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (Exception e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>虽然有些麻烦，却能避免资源泄露。我们想，如果没有修改过的代码，万一XXX.close()抛异常了，那么就进入了catch块中了，YYY.close()不会执行，YYY这块资源就不会回收了，一直占用着，这样的代码一多，是可能引起资源句柄泄露的。而改为下面的写法之后，就保证了无论如何XXX和YYY都会被close掉</p>\n<h3 id=\"对于ThreadLocal使用前或者使用后一定要先remove\">对于ThreadLocal使用前或者使用后一定要先remove<a href=\"post/性能优化#对于ThreadLocal使用前或者使用后一定要先remove\"></a></h3><p>当前基本所有的项目都使用了线程池技术，这非常好，可以动态配置线程数、可以重用线程。</p>\n<p>然而，如果你在项目中使用到了ThreadLocal，一定要记得使用前或者使用后remove一下。这是因为上面提到了线程池技术做的是一个线程重用，这意味着代码运行过程中，一条线程使用完毕，并不会被销毁而是等待下一次的使用。我们看一下Thread类中，持有ThreadLocal.ThreadLocalMap的引用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* ThreadLocal values pertaining to this thread. This map is maintained</span><br><span class=\"line\"> by the ThreadLocal class. */</span><br><span class=\"line\">ThreadLocal.ThreadLocalMap threadLocals = null;</span><br></pre></td></tr></table></figure></p>\n<p>线程不销毁意味着上条线程set的ThreadLocal.ThreadLocalMap中的数据依然存在，那么在下一条线程重用这个Thread的时候，很可能get到的是上条线程set的数据而不是自己想要的内容。</p>\n<p>这个问题非常隐晦，一旦出现这个原因导致的错误，没有相关经验或者没有扎实的基础非常难发现这个问题，因此在写代码的时候就要注意这一点，这将给你后续减少很多的工作量。</p>\n<h3 id=\"切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定\">切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定<a href=\"post/性能优化#切记以常量定义的方式替代魔鬼数字，魔鬼数字的存在将极大地降低代码可读性，字符串常量是否使用常量定义可以视情况而定\"></a></h3><h3 id=\"long或者Long初始赋值时，使用大写的L而不是小写的l，因为字母l极易与数字1混淆，这个点非常细节，值得注意\">long或者Long初始赋值时，使用大写的L而不是小写的l，因为字母l极易与数字1混淆，这个点非常细节，值得注意<a href=\"post/性能优化#long或者Long初始赋值时，使用大写的L而不是小写的l，因为字母l极易与数字1混淆，这个点非常细节，值得注意\"></a></h3><h3 id=\"所有重写的方法必须保留-Override注解\">所有重写的方法必须保留@Override注解<a href=\"post/性能优化#所有重写的方法必须保留-Override注解\"></a></h3><p>这么做有三个原因：</p>\n<p>清楚地可以知道这个方法由父类继承而来<br>getObject()和get0bject()方法，前者第四个字母是”O”，后者第四个子母是”0”，加了@Override注解可以马上判断是否重写成功<br>在抽象类中对方法签名进行修改，实现类会马上报出编译错误</p>\n<h3 id=\"推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a-equals-b-，有空指针异常的风险\">推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a.equals(b)，有空指针异常的风险<a href=\"post/性能优化#推荐使用JDK7中新引入的Objects工具类来进行对象的equals比较，直接a-equals-b-，有空指针异常的风险\"></a></h3><h3 id=\"循环体内不要使用”-”进行字符串拼接，而直接使用StringBuilder不断append\">循环体内不要使用”+”进行字符串拼接，而直接使用StringBuilder不断append<a href=\"post/性能优化#循环体内不要使用”-”进行字符串拼接，而直接使用StringBuilder不断append\"></a></h3><p>说一下不使用”+”进行字符串拼接的原因，假如我有一个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String appendStr(String oriStr, String... appendStrs) &#123;</span><br><span class=\"line\">    if (appendStrs == null || appendStrs.length == 0) &#123;</span><br><span class=\"line\">        return oriStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (String appendStr : appendStrs) &#123;</span><br><span class=\"line\">        oriStr += appendStr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return oriStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将这段代码编译之后的.class文件，使用javap -c进行反编译一下，截取关键的一部分：</p>\n<p>意思就是每次虚拟机碰到”+”这个操作符对字符串进行拼接的时候，会new出一个StringBuilder，然后调用append方法，最后调用toString()方法转换字符串赋值给oriStr对象，即循环多少次，就会new出多少个StringBuilder()来，这对于内存是一种浪费。</p>\n<h3 id=\"不捕获Java类库中定义的继承自RuntimeException的运行时异常类\">不捕获Java类库中定义的继承自RuntimeException的运行时异常类<a href=\"post/性能优化#不捕获Java类库中定义的继承自RuntimeException的运行时异常类\"></a></h3><p>异常处理效率低，RuntimeException的运行时异常类，其中绝大多数完全可以由程序员来规避，比如：</p>\n<p>ArithmeticException可以通过判断除数是否为空来规避<br>NullPointerException可以通过判断对象是否为空来规避<br>IndexOutOfBoundsException可以通过判断数组/字符串长度来规避<br>ClassCastException可以通过instanceof关键字来规避<br>ConcurrentModificationException可以使用迭代器来规避</p>\n<h3 id=\"避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed-导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数\">避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数<a href=\"post/性能优化#避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed-导致的性能下降，JDK7之后，可以使用ThreadLocalRandom来获取随机数\"></a></h3><p>解释一下竞争同一个seed导致性能下降的原因，比如，看一下Random类的nextInt()方法实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int nextInt() &#123;</span><br><span class=\"line\">    return next(32);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用了next(int bits)方法，这是一个受保护的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected int next(int bits) &#123;</span><br><span class=\"line\">    long oldseed, nextseed;</span><br><span class=\"line\">    AtomicLong seed = this.seed;</span><br><span class=\"line\">    do &#123;</span><br><span class=\"line\">        oldseed = seed.get();</span><br><span class=\"line\">        nextseed = (oldseed * multiplier + addend) &amp; mask;</span><br><span class=\"line\">    &#125; while (!seed.compareAndSet(oldseed, nextseed));</span><br><span class=\"line\">    return (int)(nextseed &gt;&gt;&gt; (48 - bits));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而这边的seed是一个全局变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * The internal state associated with this pseudorandom number generator.</span><br><span class=\"line\"> * (The specs for the methods in this class describe the ongoing</span><br><span class=\"line\"> * computation of this value.)</span><br><span class=\"line\"> */</span><br><span class=\"line\">private final AtomicLong seed;</span><br></pre></td></tr></table></figure>\n<p>多个线程同时获取随机数的时候，会竞争同一个seed，导致了效率的降低。</p>\n<h3 id=\"静态类、单例类、工厂类将它们的构造函数置为private\">静态类、单例类、工厂类将它们的构造函数置为private<a href=\"post/性能优化#静态类、单例类、工厂类将它们的构造函数置为private\"></a></h3><p>这是因为静态类、单例类、工厂类这种类本来我们就不需要外部将它们new出来，将构造函数置为private之后，保证了这些类不会产生实例对象。</p>\n","next":{"title":"http and https","slug":"httpandhttps"},"link":"http://yoursite.com/post/性能优化/"}