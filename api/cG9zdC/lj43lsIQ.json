{"title":"反射","date":"2019-05-18T12:00:00.000Z","slug":"反射","tags":["java","reflection"],"categories":["java"],"updated":"2019-05-18T13:41:24.846Z","content":"<h1 id=\"概念\">概念<a href=\"post/反射#概念\"></a></h1><p>反射就是把java的各种成分映射成相应的java类</p>\n<p>Class类的构建方法是private，由jvm创建</p>\n<blockquote>\n<p>反射是java语言的一个特性，它允程序在运行时（注意不是编译的时候）来进行自我检查并且对内部的成员进行操作。例如它允许一个java的类获取他所有的成员变量和方法并且显示出来。</p>\n</blockquote>\n<blockquote>\n<p>Class 类的实例表示正在运行的 Java 应用程序中的类和接口。枚举是一种类，注释是一种接口。每个数组属于被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。</p>\n</blockquote>\n<blockquote>\n<p>基本的 Java类型（boolean、byte、char、short、int、long、float 和 double）和关键字 void 也表示为 Class 对象。Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的。</p>\n</blockquote>\n<p>在没有对象实例的时候，主要有两种方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz1 = Role.class;</span><br><span class=\"line\">Class clazz2 = Class.forName(&quot;yu.Role&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">Object o = cls1.newInstance();</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在第二种方法中，forName中的参数一定是完整的类名（包名+类名），并且这个方法需要捕获异常。现在得到cls1就可以创建一个Role类的实例了，利用Class的newInstance方法相当于调用类的默认的构造器。</p>\n</blockquote>\n<h1 id=\"常用方法\">常用方法<a href=\"post/反射#常用方法\"></a></h1><ul>\n<li>getConstructor(Class&lt;?&gt;… parameterTypes)</li>\n</ul>\n<p>返回Constructor反映此Class 对象所表示的类的指定公共构造函数的对象。</p>\n<ul>\n<li>getConstructors()</li>\n</ul>\n<p>返回一个数组，其中包含Constructor反映此Class对象所表示的类的所有公共构造函数的 对象。</p>\n<ul>\n<li>getDeclaredFields()</li>\n</ul>\n<p>返回一个Field对象数组，反映由此Class对象表示的类或接口声明的所有字段 。</p>\n<ul>\n<li>getDeclaredField(String name)</li>\n</ul>\n<p>返回一个Field对象，该对象反映此Class 对象表示的类或接口的指定声明字段。</p>\n<ul>\n<li>getDeclaredMethods()</li>\n</ul>\n<p>返回一个数组，其中包含Method反映此Class对象所表示的类或接口的所有声明方法的对象，包括public，protected，default（包）访问和私有方法，但不包括继承的方法。</p>\n<ul>\n<li>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</li>\n</ul>\n<p>返回一个Method对象，该对象反映此Class对象表示的类或接口的指定声明方法 。</p>\n<ul>\n<li>getName()</li>\n</ul>\n<p>返回此Class对象表示的实体名称（类，接口，数组类，基本类型或void），如String。</p>\n<ul>\n<li>isPrimitive()</li>\n</ul>\n<p>确定指定的Class对象是否表示基本类型。</p>\n<h1 id=\"例题\">例题<a href=\"post/反射#例题\"></a></h1><ul>\n<li>将所有String类型的成员变量里的b改成a。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">public class TestReflect &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws SecurityException, NoSuchMethodException, NoSuchFieldException, IllegalArgumentException, Exception &#123;</span><br><span class=\"line\">        ReflectPointer rp1 = new ReflectPointer(3,4);</span><br><span class=\"line\">        changeBtoA(rp1);</span><br><span class=\"line\">        System.out.println(rp1);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static void changeBtoA(Object obj) throws RuntimeException, Exception &#123;</span><br><span class=\"line\">        Field[] fields = obj.getClass().getFields();</span><br><span class=\"line\"></span><br><span class=\"line\">        for(Field field : fields) &#123;</span><br><span class=\"line\">            //if(field.getType().equals(String.class))</span><br><span class=\"line\">            //由于字节码只有一份,用equals语义不准确</span><br><span class=\"line\">            if(field.getType()==String.class) &#123;</span><br><span class=\"line\">                String oldValue = (String)field.get(obj);</span><br><span class=\"line\">                String newValue = oldValue.replace(&apos;b&apos;, &apos;a&apos;);</span><br><span class=\"line\">                field.set(obj,newValue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ReflectPointer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int x = 0;</span><br><span class=\"line\">    public int y = 0;</span><br><span class=\"line\">    public String str1 = &quot;ball&quot;;</span><br><span class=\"line\">    public String str2 = &quot;basketball&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ReflectPointer(int x,int y) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.x = x;</span><br><span class=\"line\">        this.y = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;ReflectPointer [str1=&quot; + str1 + &quot;, str2=&quot; + str2 + &quot;, str3=&quot;</span><br><span class=\"line\">                + str3 + &quot;]&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Method类","slug":"Method"},"next":{"title":"rocketmq-console搭建","slug":"rocketmq-console"},"link":"http://yoursite.com/post/反射/","toc":[{"title":"概念","id":"概念","index":"1"},{"title":"常用方法","id":"常用方法","index":"2"},{"title":"例题","id":"例题","index":"3"}]}